---
# tasks file for php

# Install Dependencies
- name: Ensure PHP dependencies are installed
  apt:
    name: "{{ item }}"
    state: present
  with_items: "{{ php_dependencies | list }}"

# Variable setup
# - name: Set the PHP webserver daemon correctly when nginx is in use
#   set_fact:
#     php_webserver_daemon: nginx
#   when: mimetic_webserver == 'nginx'

# - name: Set the PHP webserver daemon correctly when apache is in use
#   set_fact:
#     php_webserver_daemon: apache2
#   when: mimetic_webserver == 'apache'

# Setup/install tasks
- name: Add repository for PHP versions
  apt_repository:
    repo: ppa:ondrej/php
    state: present
    update_cache: yes
  register: php_add_repo

- name: Update apt cache
  apt:
    update_cache: yes
    cache_valid_time: 86400
  when: php_add_repo.changed

- name: Ensure PHP packages are installed
  apt:
    name: "{{ item }}"
    state: "{{ php_packages_state }}"
    install_recommends: "{{ php_install_recommends }}"
  with_items: "{{ php_packages }}"
  register: php_package_install

# Configure PHP
- name: Configure PHP CLI settings
  lineinfile:
    dest: "/etc/php/{{ php_version }}/cli/php.ini"
    regexp: "^{{ item.param }} ="
    line: "{{ item.param }} = {{ item.value }}"
  with_items:
    - { param: error_reporting, value: "E_ALL" }
    - { param: display_errors, value: "On" }
    - { param: memory_limit, value: "512M" }
    - { param: date.timezone , value: "UTC" }
  notify: restart webserver

# Configure Apache
- name: Ensure PHP mod packages are installed
  apt:
    name: "libapache2-mod-php{{ php_version }}"
    state: present
  register: php_mod_package_install
  notify: restart webserver
  when: php_enable_webserver

# - name: "Enable Apache2 PHP modules"
#   apache2_module:
#     state: present
#     name: "php{{ php_version }}"

- name: Ensure PHP log directory exists
  file:
    path: "/var/log/php"
    state: directory
    mode: 0775
    owner: www-data
    group: www-data
  when: php_enable_webserver

- name: Ensure PHP error log file exists
  copy:
    content: ""
    dest: /var/log/php/error.log
    force: no
    mode: 0775
    group: www-data
    owner: www-data
  when: php_enable_webserver

- name: Configure PHP Apache settings
  lineinfile:
    dest: "/etc/php/{{ php_version }}/apache2/php.ini"
    regexp: "^{{ item.param }} ="
    line: "{{ item.param }} = {{ item.value }}"
  with_items:
    - { param: error_reporting, value: "E_COMPILE_ERROR | E_RECOVERABLE_ERROR | E_ERROR | E_CORE_ERROR" }
    - { param: display_errors, value: "On" }
    - { param: cgi.fix_pathinfo, value: "0" }
    - { param: memory_limit, value: "512M" }
    - { param: upload_max_filesize, value: "100M" }
    - { param: post_max_size, value: "100M" }
    - { param: max_input_time, value: "30" }
    - { param: error_log, value: "/var/log/php/error.log" }
    - { param: date.timezone , value: "UTC" }
  notify: restart webserver
  when: php_enable_webserver

# OpCache configuration tasks
- name: Configure OpCache config settings
  lineinfile:
    dest: "/etc/php/{{ php_version }}/mods-available/opcache.ini"
    regexp: "^{{ item.param }}="
    line: "{{ item.param }}={{ item.value }}"
  with_items:
    - { param: opcache.revalidate_freq, value: "0" }
  notify: restart webserver
  when: php_opcache_enable

# Xdebug configuration tasks
- name: Configure PHP xdebug
  lineinfile:
    dest: "/etc/php/{{ php_version }}/mods-available/xdebug.ini"
    regexp: "^{{ item.param }}="
    line: "{{ item.param }}={{ item.value }}"
    create: yes
    mode: 0644
  with_items:
    - { param: xdebug.remote_enable, value: "1" }
    - { param: xdebug.remote_connect_back, value: "1" }
    - { param: xdebug.remote_port , value: "9000" }
    - { param: xdebug.max_nesting_level , value: "512" }
  notify: restart webserver

- name: Disable Xdebug CLI
  file:
    path: /etc/php/{{ php_version }}/cli/conf.d/20-xdebug.ini
    state: absent

# Setup Info page
- name: Ensure PHP error log file exists
  copy:
    content: "<?php phpinfo(); ?>"
    dest: /var/www/html/info.php
    force: no
  when: php_enable_webserver

# Pecl installation tasks
- name: Ensure pecl is installed (if configured)
  package:
    name: "{{ php_pecl_package }}"
    state: present
  when: php_pecl_install_pecl

- name: Install PECL libaries
  shell: "yes '' | {{ php_pecl_install_command }} {{ item }}"
  register: pecl_result
  changed_when: "pecl_result.rc == 0"
  failed_when: "not (('already installed' in pecl_result.stdout) or ('install ok:' in pecl_result.stdout))"
  with_items: "{{ php_pecl_extensions }}"

# Phar installation tasks
- name: Installing Phar tools
  get_url:
    url: "{{ item.url }}"
    dest: "{{ php_phar_path }}/{{ item.dest }}"
    force: no
    mode: 0755
  with_items: "{{ php_phar_tools }}"
  when: php_phar_tools is defined and php_phar_tools
