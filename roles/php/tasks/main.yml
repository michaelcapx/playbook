---
# tasks file for php

# Variable setup
- name: Ensure PHP version -specific workspace directory exists
  file:
    path: "/root/php{{ php_version }}"
    state: directory
    mode: 0775

- name: Set the PHP webserver daemon correctly when nginx is in use
  set_fact:
    php_webserver_daemon: nginx
  when: pbook_webserver == 'nginx'

- name: Set the PHP webserver daemon correctly when apache is in use
  set_fact:
    php_webserver_daemon: apache2
  when: pbook_webserver == 'apache'

# Setup/install tasks
- name: Add repository for PHP versions
  apt_repository:
    repo: ppa:ondrej/php
    state: present
  register: php_add_apt_repo

- name: Ensure PHP packages are installed
  apt:
    name: "{{ item }}"
    state: latest
  with_items: "{{ php_packages }}"
  register: php_package_install
  notify: restart webserver
  when: php_add_apt_repo | succeeded

# Apache tasks
# - name: Ensure Mod-PHP when apache is in use
#   apt:
#     name: "libapache2-mod-php{{ php_version }}"
#     state: latest
#   notify: restart webserver
#   when: pbook_webserver == 'apache' and not php_enable_php_fpm

# - name: "Enable Apache PHP {{ php_version | default ('7.1') }} modules"
#   apache2_module:
#     name: "php{{ php_version | default ('7.1') }}"
#     state: present
#   when: pbook_webserver == 'apache' and not php_enable_php_fpm

# Configuration tasks
- name: Ensure configuration directories exist
  file:
    path: "{{ item }}"
    state: directory
    follow: true
  with_flattened:
    - "{{ php_conf_paths }}"
    - "{{ php_extension_conf_paths }}"

- name: Configure PHP CLI settings
  lineinfile:
    dest: "/etc/php/{{ php_version }}/cli/php.ini"
    regexp: "^{{ item.param }} ="
    line: "{{ item.param }} = {{ item.value }}"
  with_items :
    - { param: max_execution_time, value: "{{ php_max_execution_time }}" }
    - { param: memory_limit, value: "{{ php_memory_limit }}" }
    - { param: error_reporting, value: "{{ php_error_reporting }}" }
    - { param: display_errors, value: "{{ php_display_errors }}" }
    - { param: display_startup_errors, value: "{{ php_display_startup_errors }}" }
    - { param: post_max_size, value: "{{ php_post_max_size }}" }
    - { param: upload_max_filesize, value: "{{ php_upload_max_filesize }}" }
    - { param: date.timezone , value: "{{ php_date_timezone }}" }
    - { param: sendmail_path, value: "{{ php_sendmail_path }}" }
    - { param: cgi.fix_pathinfo , value: "0" }
  notify: restart webserver
  when: php_use_managed_ini

- name: Configure PHP FPM settings
  lineinfile:
    dest: "/etc/php/{{ php_version }}/fpm/php.ini"
    regexp: "^{{ item.param }} ="
    line: "{{ item.param }} = {{ item.value }}"
  with_items :
    - { param: max_execution_time, value: "{{ php_max_execution_time }}" }
    - { param: memory_limit, value: "{{ php_memory_limit }}" }
    - { param: error_reporting, value: "{{ php_error_reporting }}" }
    - { param: display_errors, value: "{{ php_display_errors }}" }
    - { param: display_startup_errors, value: "{{ php_display_startup_errors }}" }
    - { param: post_max_size, value: "{{ php_post_max_size }}" }
    - { param: upload_max_filesize, value: "{{ php_upload_max_filesize }}" }
    - { param: date.timezone , value: "{{ php_date_timezone }}" }
    - { param: sendmail_path, value: "{{ php_sendmail_path }}" }
    - { param: cgi.fix_pathinfo , value: "0" }
  notify: restart webserver
  when: php_use_managed_ini

# - name: Configure PHP Apache settings
#   lineinfile:
#     dest: "/etc/php/{{ php_version }}/apache2/php.ini"
#     regexp: "^{{ item.param }} ="
#     line: "{{ item.param }} = {{ item.value }}"
#   with_items :
#     - { param: max_execution_time, value: "{{ php_max_execution_time }}" }
#     - { param: memory_limit, value: "{{ php_memory_limit }}" }
#     - { param: error_reporting, value: "{{ php_error_reporting }}" }
#     - { param: display_errors, value: "{{ php_display_errors }}" }
#     - { param: display_startup_errors, value: "{{ php_display_startup_errors }}" }
#     - { param: post_max_size, value: "{{ php_post_max_size }}" }
#     - { param: upload_max_filesize, value: "{{ php_upload_max_filesize }}" }
#     - { param: date.timezone , value: "{{ php_date_timezone }}" }
#     - { param: sendmail_path, value: "{{ php_sendmail_path }}" }
#     - { param: cgi.fix_pathinfo , value: "0" }
#   notify: restart webserver
#   when: pbook_webserver == 'apache' and not php_enable_php_fpm and php_use_managed_ini

# OpCache configuration tasks
- name: Configure OpCache config settings
  lineinfile:
    dest: "/etc/php/{{ php_version }}/mods-available/opcache.ini"
    regexp: "^{{ item.param }}="
    line: "{{ item.param }}={{ item.value }}"
  with_items :
    - { param: opcache.enable, value: "{{ php_opcache_enable }}" }
    - { param: opcache.enable_cli, value: "{{ php_opcache_enable_cli }}" }
    - { param: opcache.memory_consumption, value: "{{ php_opcache_memory_consumption }}" }
    - { param: opcache.interned_strings_buffer, value: "{{ php_opcache_interned_strings_buffer }}" }
    - { param: opcache.max_accelerated_files, value: "{{ php_opcache_max_accelerated_files }}" }
    - { param: opcache.max_wasted_percentage, value: "{{ php_opcache_max_wasted_percentage }}" }
    - { param: opcache.validate_timestamps, value: "{{ php_opcache_validate_timestamps }}" }
    - { param: opcache.revalidate_path, value: "{{ php_opcache_revalidate_path }}" }
    - { param: opcache.revalidate_freq, value: "{{ php_opcache_revalidate_freq }}" }
    - { param: opcache.max_file_size, value: "{{ php_opcache_max_file_size }}" }
    - { param: opcache.save_comments, value: "{{ php_opcache_save_comments }}" }
    - { param: opcache.fast_shutdown, value: "{{ php_opcache_fast_shutdown }}" }
  when: php_opcache_enable
  notify: restart webserver

# PHP-FPM configuration tasks
- name: Configure php-fpm pool
  lineinfile:
    dest: "/etc/php/{{ php_version }}/fpm/pool.d/www.conf"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: "^user.?=.+$"
      line: "user = {{ php_fpm_pool_user }}"
    - regexp: "^group.?=.+$"
      line: "group = {{ php_fpm_pool_group }}"
    - regexp: "^listen.?=.+$"
      line: "listen = {{ php_fpm_listen }}"
    - regexp: '^listen\.allowed_clients.?=.+$'
      line: "listen.allowed_clients = {{ php_fpm_listen_allowed_clients }}"
    - regexp: '^pm\.max_children.?=.+$'
      line: "pm.max_children = {{ php_fpm_pm_max_children }}"
    - regexp: '^pm\.start_servers.?=.+$'
      line: "pm.start_servers = {{ php_fpm_pm_start_servers }}"
    - regexp: '^pm\.min_spare_servers.?=.+$'
      line: "pm.min_spare_servers = {{ php_fpm_pm_min_spare_servers }}"
    - regexp: '^pm\.max_spare_servers.?=.+$'
      line: "pm.max_spare_servers = {{ php_fpm_pm_max_spare_servers }}"
  when: php_enable_php_fpm
  notify: restart php-fpm

- name: Ensure php-fpm is started and enabled at boot
  service:
    name: "{{ php_fpm_daemon }}"
    state: started
    enabled: yes
    use: service
  when: php_enable_php_fpm

# Xdebug configuration tasks
- name: Configure PHP xdebug
  lineinfile:
    dest: "/etc/php/{{ php_version }}/mods-available/xdebug.ini"
    regexp: "^{{ item.param }}="
    line: "{{ item.param }}={{ item.value }}"
    create: yes
    mode: 0644
  with_items :
    - { param: xdebug.coverage_enable, value: "{{ php_xdebug_coverage_enable }}" }
    - { param: xdebug.default_enable, value: "{{ php_xdebug_default_enable }}" }
    - { param: xdebug.remote_enable, value: "{{ php_xdebug_remote_enable }}" }
    - { param: xdebug.remote_connect_back, value: "{{ php_xdebug_remote_connect_back }}" }
    - { param: xdebug.remote_host , value: "{{ php_xdebug_remote_host }}" }
    - { param: xdebug.remote_port , value: "{{ php_xdebug_remote_port }}" }
    - { param: xdebug.remote_handler, value: "{{ php_xdebug_remote_handler }}" }
    - { param: xdebug.remote_log , value: "{{ php_xdebug_remote_log }}" }
    - { param: xdebug.remote_autostart , value: "{{ php_xdebug_remote_autostart }}" }
    - { param: xdebug.idekey , value: "{{ php_xdebug_idekey }}" }
    - { param: xdebug.max_nesting_level , value: "{{ php_xdebug_max_nesting_level }}" }
    - { param: xdebug.cli_color, value: "{{ php_xdebug_cli_color }}" }
  notify:
    - restart webserver
    - restart php-fpm

- name: Disable Xdebug CLI
  file:
    path: /etc/php/{{ php_version }}/cli/conf.d/20-xdebug.ini
    state: absent

# Pecl installation tasks
- name: Ensure pecl is installed (if configured)
  package:
    name: "{{ php_pecl_package }}"
    state: present
  when: php_pecl_install_pecl

- name: Install PECL libaries
  shell: "yes '' | {{ php_pecl_install_command }} {{ item }}"
  register: pecl_result
  changed_when: "pecl_result.rc == 0"
  failed_when: "not (('already installed' in pecl_result.stdout) or ('install ok:' in pecl_result.stdout))"
  with_items: "{{ php_pecl_extensions }}"

# Phar installation tasks.
- name: Installing Phar tools
  get_url:
    url: "{{ item.url }}"
    dest: "{{ php_phar_path }}/{{ item.dest }}"
    force: no
    mode: 0755
  with_items: "{{ php_phar_tools }}"
  when: php_phar_tools is defined and php_phar_tools
