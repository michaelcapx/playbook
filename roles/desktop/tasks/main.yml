---
# tasks file for desktop

# Install Dependencies
- name: Install desktop dependencies
  apt:
    name: "{{ item }}"
    state: "{{ desktop_apt_state }}"
  with_items: "{{ desktop_apt_dependencies | list }}"

# Install Packages
- name: Add desktop PPA repositories
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items: "{{ desktop_apt_ppa }}"
  register: desktop_add_apt_repo

- name: Install desktop software packages
  apt:
    name: "{{ item }}"
    state: "{{ desktop_apt_state }}"
  with_items: "{{ desktop_apt_packages_common | list }}"
  when: desktop_add_apt_repo | succeeded

# Create Directories
- name: Make sure /usr/local/share/applications exists
  file:
    path: /usr/local/share/applications
    state: directory
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"

- name: Make sure startup application directory exists
  file:
    path: "{{ ansible_env.HOME }}/.config/autostart"
    state: directory
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"

# Set Permissions
- name: Set jack.sh with proper permissions
  file:
    dest: /etc/acpi/jack.sh
    owner: root
    group: root
    mode: 0755

# Imagemagick Configuration
- name: Copy imagemagick desktop entry files
  copy:
    src: "{{ item }}"
    dest: "/usr/local/share/applications/{{ item }}"
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
  with_items:
    - display-im6.q16.desktop
    - display-im6.desktop

# Gimp Configuration
- name: Add Gimp configuration
  lineinfile:
    dest: "{{ ansible_env.HOME }}/.gimp-2.8/sessionrc"
    regexp: "{{ item.param }}"
    line: "{{ item.value }}"
    create: true
  with_items :
    - { param: "single-window-mode", value: "(single-window-mode yes)" }
    - { param: "default-snap-to-canvas", value: "(default-snap-to-canvas yes)" }
    - { param: "default-snap-to-grid", value: "(default-snap-to-grid yes)" }

# Albert Configuration
- name: Add Albert startup entry
  template:
    src: albert.desktop.j2
    dest: "{{ ansible_env.HOME }}/.config/autostart/albert.desktop"
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"

- name: Create Albert icons directory
  file:
    path: "{{ ansible_env.HOME }}/.config/albert/icons"
    state: directory
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"

- name: Copy Albert websearch icons
  copy:
    src: "{{ item }}"
    dest: "{{ ansible_env.HOME }}/.config/albert/icons"
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
  with_items:
    - amazon.svg
    - ebay.svg
    - github.svg
    - google.svg
    - wikipedia.svg
    - wolfram.svg
    - youtube.svg

- name: Configure Albert websearch extension
  copy:
    dest: "{{ ansible_env.HOME }}/.config/albert/org.albert.extension.websearch.json"
    content: "{{ desktop_albert_websearch | to_nice_json }}"
    mode: 0664
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"

- name: Configure Albert
  template:
    src: albert.conf.j2
    dest: "{{ ansible_env.HOME }}/.config/albert.conf"
    mode: 0664
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"

# Minecraft Installation
- name: Check if Java is installed
  command: java -version
  register: desktop_check_java
  ignore_errors: yes
  failed_when: desktop_check_java.rc > 1
  changed_when: desktop_check_java.rc == 1

- name: Ensure Java is installed
  apt:
    name: default-jre
    state: "{{ desktop_apt_state }}"
  when: desktop_check_java.rc > 1

- name: Copy Minecraft launcher
  copy:
    src: Minecraft.jar
    dest: /usr/local/bin/Minecraft.jar

- name: Copy Minecraft icon
  copy:
    src: minecraft.png
    dest: /usr/share/pixmaps/minecraft.png

- name: Create Minecraft desktop file
  template:
    src: minecraft.desktop.j2
    dest: /usr/local/share/applications/minecraft.desktop
    owner: "{{ ansible_env.USER }}"
    group: "{{ ansible_env.USER }}"
