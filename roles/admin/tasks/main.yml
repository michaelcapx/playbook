---
# tasks file for admin

# Generate Admin Password
- name: Ensure mkpasswd is installed
  command: which mkpasswd
  register: admin_check_mkpasswd
  ignore_errors: yes
  failed_when: admin_check_mkpasswd.rc > 1
  changed_when: admin_check_mkpasswd.rc == 1

- name: Ensure mkpasswd (through whois) is installed
  become: yes
  apt:
    name: whois
    state: present
  when: admin_check_mkpasswd.rc > 1

- name: Generate user password
  command: "mkpasswd --method=sha-512 {{ admin_password }}"
  register: admin_password_hash
  when: admin_password is defined and admin_password != ''

- name: Set user password fact
  set_fact:
    admin_encrypted_pass: "{{ admin_password_hash.stdout }}"
    when: admin_password_hash is defined and admin_password_hash != ''

# Setup Admin User
- name: Create admin user account
  become: yes
  user:
    name: "{{ admin_user }}"
    password: "{{ admin_encrypted_pass | default(omit) }}"
    comment: "{{ admin_fullname | default(omit) }}"
    group: "{{ admin_group | default(admin_user) }}"
    groups: "{{ admin_groups | join(',') }}"
    state: present
    append: yes
  register: setup_admin

- name: Setting admin user's home permission
  become: yes
  file:
    dest: "{{ admin_home }}"
    owner: "{{ admin_user }}"
    group: "{{ admin_group }}"
    mode: 0755
  when: setup_admin.changed == True

# Configure XDG Directories
- name: Configure XDG user directories
  lineinfile:
    dest: "{{ admin_home }}/.config/user-dirs.dirs"
    regexp: "^XDG_{{ item.name }}_DIR="
    line: "XDG_{{ item.name }}_DIR=\"{{ item.path }}\""
  with_items : "{{ admin_xdg_directories }}"

- name: Build XDG directories
  file:
    path: "{{ admin_home }}/{{ item.dir }}"
    force: yes
    state: "{{ item.state }}"
    owner: "{{ admin_user }}"
    group: "{{ admin_group }}"
    mode: 0755
  with_items: "{{ admin_xdg_directories }}"

- name : Run xdg-user-dirs-update
  shell: xdg-user-dirs-update
  become: true
  become_user: "{{ admin_user }}"

# Encrypt Home Folder
- name: Ensure encryption dependencies are installed
  become: yes
  apt:
    name: "{{ item }}"
    state: present
    update_cache: yes
    cache_valid_time: "{{ admin_apt_cache_time }}"
  with_items: "{{ admin_encryption_dependencies | list }}"
  when: admin_home_encryption

- name: Encrypt the user home directory
  become: yes
  shell: "{{ admin_password }} | ecryptfs-migrate-home -u {{ admin_user }}"
  when: admin_home_encryption
