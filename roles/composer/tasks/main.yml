---
# tasks file for composer

- name: Check Composer version
  command: "composer --version"
  register: composer_installed
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: Install Composer
  shell: "curl -sS https://getcomposer.org/installer | php && mv -f ./composer.phar {{ composer_path }}"
  args:
    creates: "{{ composer_path }}"
    warn: false
  when: composer_installed | failed

- name: Make Composer executable
  file:
    path: "{{ composer_path }}"
    mode: 0755

- name: Ensure composer directory exists
  file:
    path: "{{ composer_home_path }}"
    owner: "{{ composer_home_owner }}"
    group: "{{ composer_home_group }}"
    state: directory

# Composer global require
- name: Install configured globally-required packages
  command: >
    {{ composer_path }} global require {{ item.name }}:{{ item.release | default('@stable') }} --no-progress
    creates={{ composer_home_path }}/vendor/{{ item.name }}
  environment:
    COMPOSER_HOME: "{{ composer_home_path }}"
  become: yes
  become_user: "{{ composer_home_owner }}"
  register: composer_global_require_result
  with_items: "{{ composer_packages }}"
  when: composer_packages|length > 0

# - name: Install global Composer packages
#   composer:
#     command: "{{ (item.state | default('present') == 'absent') | ternary('remove', 'require') }}"
#     arguments: "{{ item.name | default(item) }} {{ item.release | default('@stable') }}"
#     global_command: yes
#     # Ansible 2.4 supports `global_command` making `working_dir` optional.
#     working_dir: "{{ lookup('env', 'COMPOSER_HOME') | default(composer_home_path) | default('~/.composer', true) }}"
#   with_items: "{{ composer_packages }}"

# Composer path
- name: Add composer_home_path bin directory to global $PATH
  copy:
    dest: /etc/profile.d/composer.sh
    content: "export PATH=$PATH:{{ composer_home_path }}/vendor/bin"
    mode: 0664
  when: composer_add_to_path

# Cleanup composer archives
- name: Count old composer archives
  shell: ls {{ composer_home_path }}/*-old.phar
  register: files_to_cleanup
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: Clean old composer archives
  file:
    name: "{{ item }}"
    state: absent
  with_items: files_to_cleanup.stdout_lines
  when: files_to_cleanup.stdout_lines | count > 0

# Upgrade composer
- name: Upgrade Composer
  shell: composer self-update
  ignore_errors: true
  failed_when: false
  when: composer_installed | success
